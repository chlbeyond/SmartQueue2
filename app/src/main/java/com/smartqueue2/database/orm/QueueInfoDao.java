package com.smartqueue2.database.orm;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.smartqueue2.database.ormsql.QueueInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUEUE_INFO".
*/
public class QueueInfoDao extends AbstractDao<QueueInfo, Long> {

    public static final String TABLENAME = "QUEUE_INFO";

    /**
     * Properties of entity QueueInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property QueueId = new Property(1, Long.class, "queueId", false, "QUEUE_ID");
        public final static Property ShopQueueId = new Property(2, Long.class, "shopQueueId", false, "SHOP_QUEUE_ID");
        public final static Property QueueName = new Property(3, String.class, "queueName", false, "QUEUE_NAME");
        public final static Property Num = new Property(4, int.class, "num", false, "NUM");
        public final static Property People = new Property(5, int.class, "people", false, "PEOPLE");
        public final static Property Phone = new Property(6, String.class, "phone", false, "PHONE");
        public final static Property Create = new Property(7, java.util.Date.class, "create", false, "CREATE");
        public final static Property State = new Property(8, int.class, "state", false, "STATE");
        public final static Property Count = new Property(9, int.class, "count", false, "COUNT");
    }


    public QueueInfoDao(DaoConfig config) {
        super(config);
    }
    
    public QueueInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUEUE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"QUEUE_ID\" INTEGER," + // 1: queueId
                "\"SHOP_QUEUE_ID\" INTEGER," + // 2: shopQueueId
                "\"QUEUE_NAME\" TEXT," + // 3: queueName
                "\"NUM\" INTEGER NOT NULL ," + // 4: num
                "\"PEOPLE\" INTEGER NOT NULL ," + // 5: people
                "\"PHONE\" TEXT," + // 6: phone
                "\"CREATE\" INTEGER," + // 7: create
                "\"STATE\" INTEGER NOT NULL ," + // 8: state
                "\"COUNT\" INTEGER NOT NULL );"); // 9: count
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUEUE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, QueueInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long queueId = entity.getQueueId();
        if (queueId != null) {
            stmt.bindLong(2, queueId);
        }
 
        Long shopQueueId = entity.getShopQueueId();
        if (shopQueueId != null) {
            stmt.bindLong(3, shopQueueId);
        }
 
        String queueName = entity.getQueueName();
        if (queueName != null) {
            stmt.bindString(4, queueName);
        }
        stmt.bindLong(5, entity.getNum());
        stmt.bindLong(6, entity.getPeople());
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(7, phone);
        }
 
        java.util.Date create = entity.getCreate();
        if (create != null) {
            stmt.bindLong(8, create.getTime());
        }
        stmt.bindLong(9, entity.getState());
        stmt.bindLong(10, entity.getCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, QueueInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long queueId = entity.getQueueId();
        if (queueId != null) {
            stmt.bindLong(2, queueId);
        }
 
        Long shopQueueId = entity.getShopQueueId();
        if (shopQueueId != null) {
            stmt.bindLong(3, shopQueueId);
        }
 
        String queueName = entity.getQueueName();
        if (queueName != null) {
            stmt.bindString(4, queueName);
        }
        stmt.bindLong(5, entity.getNum());
        stmt.bindLong(6, entity.getPeople());
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(7, phone);
        }
 
        java.util.Date create = entity.getCreate();
        if (create != null) {
            stmt.bindLong(8, create.getTime());
        }
        stmt.bindLong(9, entity.getState());
        stmt.bindLong(10, entity.getCount());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public QueueInfo readEntity(Cursor cursor, int offset) {
        QueueInfo entity = new QueueInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // queueId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // shopQueueId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // queueName
            cursor.getInt(offset + 4), // num
            cursor.getInt(offset + 5), // people
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // phone
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // create
            cursor.getInt(offset + 8), // state
            cursor.getInt(offset + 9) // count
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, QueueInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setQueueId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setShopQueueId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setQueueName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNum(cursor.getInt(offset + 4));
        entity.setPeople(cursor.getInt(offset + 5));
        entity.setPhone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setState(cursor.getInt(offset + 8));
        entity.setCount(cursor.getInt(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(QueueInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(QueueInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(QueueInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
