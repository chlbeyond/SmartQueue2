package com.smartqueue2.database.orm;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.smartqueue2.database.ormsql.QueueSetInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QUEUE_SET_INFO".
*/
public class QueueSetInfoDao extends AbstractDao<QueueSetInfo, Long> {

    public static final String TABLENAME = "QUEUE_SET_INFO";

    /**
     * Properties of entity QueueSetInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property A_1 = new Property(1, int.class, "A_1", false, "A_1");
        public final static Property A_2 = new Property(2, int.class, "A_2", false, "A_2");
        public final static Property B_1 = new Property(3, int.class, "B_1", false, "B_1");
        public final static Property B_2 = new Property(4, int.class, "B_2", false, "B_2");
        public final static Property C_1 = new Property(5, int.class, "C_1", false, "C_1");
        public final static Property C_2 = new Property(6, int.class, "C_2", false, "C_2");
        public final static Property D_1 = new Property(7, int.class, "D_1", false, "D_1");
        public final static Property D_2 = new Property(8, int.class, "D_2", false, "D_2");
        public final static Property E_1 = new Property(9, int.class, "E_1", false, "E_1");
        public final static Property E_2 = new Property(10, int.class, "E_2", false, "E_2");
    }


    public QueueSetInfoDao(DaoConfig config) {
        super(config);
    }
    
    public QueueSetInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QUEUE_SET_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"A_1\" INTEGER NOT NULL ," + // 1: A_1
                "\"A_2\" INTEGER NOT NULL ," + // 2: A_2
                "\"B_1\" INTEGER NOT NULL ," + // 3: B_1
                "\"B_2\" INTEGER NOT NULL ," + // 4: B_2
                "\"C_1\" INTEGER NOT NULL ," + // 5: C_1
                "\"C_2\" INTEGER NOT NULL ," + // 6: C_2
                "\"D_1\" INTEGER NOT NULL ," + // 7: D_1
                "\"D_2\" INTEGER NOT NULL ," + // 8: D_2
                "\"E_1\" INTEGER NOT NULL ," + // 9: E_1
                "\"E_2\" INTEGER NOT NULL );"); // 10: E_2
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QUEUE_SET_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, QueueSetInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getA_1());
        stmt.bindLong(3, entity.getA_2());
        stmt.bindLong(4, entity.getB_1());
        stmt.bindLong(5, entity.getB_2());
        stmt.bindLong(6, entity.getC_1());
        stmt.bindLong(7, entity.getC_2());
        stmt.bindLong(8, entity.getD_1());
        stmt.bindLong(9, entity.getD_2());
        stmt.bindLong(10, entity.getE_1());
        stmt.bindLong(11, entity.getE_2());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, QueueSetInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getA_1());
        stmt.bindLong(3, entity.getA_2());
        stmt.bindLong(4, entity.getB_1());
        stmt.bindLong(5, entity.getB_2());
        stmt.bindLong(6, entity.getC_1());
        stmt.bindLong(7, entity.getC_2());
        stmt.bindLong(8, entity.getD_1());
        stmt.bindLong(9, entity.getD_2());
        stmt.bindLong(10, entity.getE_1());
        stmt.bindLong(11, entity.getE_2());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public QueueSetInfo readEntity(Cursor cursor, int offset) {
        QueueSetInfo entity = new QueueSetInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // A_1
            cursor.getInt(offset + 2), // A_2
            cursor.getInt(offset + 3), // B_1
            cursor.getInt(offset + 4), // B_2
            cursor.getInt(offset + 5), // C_1
            cursor.getInt(offset + 6), // C_2
            cursor.getInt(offset + 7), // D_1
            cursor.getInt(offset + 8), // D_2
            cursor.getInt(offset + 9), // E_1
            cursor.getInt(offset + 10) // E_2
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, QueueSetInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setA_1(cursor.getInt(offset + 1));
        entity.setA_2(cursor.getInt(offset + 2));
        entity.setB_1(cursor.getInt(offset + 3));
        entity.setB_2(cursor.getInt(offset + 4));
        entity.setC_1(cursor.getInt(offset + 5));
        entity.setC_2(cursor.getInt(offset + 6));
        entity.setD_1(cursor.getInt(offset + 7));
        entity.setD_2(cursor.getInt(offset + 8));
        entity.setE_1(cursor.getInt(offset + 9));
        entity.setE_2(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(QueueSetInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(QueueSetInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(QueueSetInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
